# Path to your oh-my-zsh installation.
export ZSH=/home/mdaffis/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="dst"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

# User configuration

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:$HOME/.npm-global/bin
# export MANPATH="/usr/local/man:$MANPATH"
export PATH=$PATH:$HOME/.cargo/bin
export PATH=$PATH:$HOME/.config/yarn/global/node_modules/.bin

source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
export LANG=en_US.UTF-8
export EDITOR='vim'

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
alias tmux="tmux -2"
alias h="heroku"


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# GIT aliases

alias g="git"
alias gs="git status"
alias ga="git add"
alias gA="git add -A"
alias gc="git commit"
alias gr="git reset"
alias gu="git reset"
alias gp="git push"
alias gpo="git push origin"
alias gP="git pull"
alias gca="git commit --amend"
alias gC="git checkout"
alias gCM="git checkout master"
alias gCB="git checkout -b"
alias gb="git branch"
alias gcp="git cherry-pick"
alias gd="git diff"
alias gdc="git diff --cached"
alias gf="git fetch"
alias gg="git log --graph --pretty=custom"       # Show custom graph.
alias gl="git log --pretty=custom"               # Show custom log.
alias glc="git shortlog --summary --numbered"    # List contributors.
alias grb="git rebase"
alias grlc="git reset --hard HEAD~1"               # Remove last commit.
alias gulc="git reset --soft HEAD~1"               # Undo last commit.
alias gw="git instaweb --httpd=webrick"          # Start web-based visualizer.

# Find commits by source code.
function gscc() {
  git log --pretty=custom --decorate --date=short -S "$1";
};

# Find commits by commit message.
function gscm() {
  git log --pretty=custom --decorate --date=short --grep="$1";
};

# Credit an author on the latest commit.
function gcredit() {
  if [ -n "$1" ] && [ -n "$2" ]; then
    git commit --amend --author "$1 <$2>" -C HEAD;
  fi
};

# List remote branches.
function glrb() {
  remote="${1:-origin}";
  git ls-remote --heads "$remote";
};

# Merge GitHub pull request on top of the current branch or,
# if a branch name is specified, on top of the specified branch.
function gmpr() {
  declare currentBranch=\"$(git symbolic-ref --short HEAD)\";
  declare branch=\"${2:-$currentBranch}\";
  if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then
    git fetch origin refs/pull/$1/head:pr/$1 && \
    git checkout -B $branch && \
    git rebase $branch pr/$1 && \
    git checkout -B $branch && \
    git merge pr/$1 && \
    git branch -D pr/$1 && \
    git commit --amend -m "$(git log -1 --pretty=%B)\n\nClose #$1";
  fi
};

# Remove the tag with the specified tag name if
# exists and tag the latest commit with that name.
function gretag() {
  git tag -d "$1" &> /dev/null;
  git tag $1;
};

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Yaourt (arch package manager) aliases

# alias y="yaourt"
# alias ys="yaourt -S"
# alias yss="yaourt -Ss"
# alias yr="yaourt -R"
# alias ysu="yaourt -Syu"
# alias yar="yaourt -Qdt"
# alias ysc="yaourt -Sc"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APT (debian/ubuntu package manager) aliases

alias a="sudo apt"
alias ai="sudo apt install -y"
alias as="sudo apt search"
alias ar="sudo apt remove"
alias aufu="sudo apt update && sudo apt full-upgrade -y"
alias auu="sudo apt update && sudo apt upgrade -y"
alias aar="sudo apt autoremove"
alias y="a"
alias ys="ai"
alias yss="as"
alias yr="ar"
alias ysu="aufu"
alias yar="aar"
